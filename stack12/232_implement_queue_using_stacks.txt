#这个push复杂度O(n)，pop复杂度O(1)
class MyQueue {
public:
    /** Initialize your data structure here. */
    MyQueue() {
        
    }
    
    /** Push element x to the back of queue. */
    void push(int x) {
        while(!st.empty())
        {
            sthelp.push(st.top());
            st.pop();
        }
        st.push(x);
        while(!sthelp.empty())
        {
            st.push(sthelp.top());
            sthelp.pop();
        }
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() {
        int temp=st.top();
        st.pop();
        return temp;
    }
    
    /** Get the front element. */
    int peek() {
        return st.top();
    }
    
    /** Returns whether the queue is empty. */
    bool empty() {
        return st.empty();
    }
private:
    stack<int> st;
    stack<int> sthelp;
};



/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * bool param_4 = obj.empty();
 */




#这个push和pop的复杂度都是O(1)，很巧妙
class MyQueue {
public:
    /** Initialize your data structure here. */
    MyQueue() {
        
    }
    
    /** Push element x to the back of queue. */
    void push(int x) {
        st.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() {
        if(sthelp.empty())
        {
            while(!st.empty())
            {
                sthelp.push(st.top());
                st.pop();
            }
        }
        int temp=sthelp.top();
        sthelp.pop();
        return temp;
    }
    
    /** Get the front element. */
    int peek() {
        if(sthelp.empty())
        {
            while(!st.empty())
            {
                sthelp.push(st.top());
                st.pop();
            }
        }
        return sthelp.top();
    }
    
    /** Returns whether the queue is empty. */
    bool empty() {
        return st.empty()&&sthelp.empty();
    }
private:
    stack<int> st;
    stack<int> sthelp;
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * bool param_4 = obj.empty();
 */