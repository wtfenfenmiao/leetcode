//第一种，和116我自己写的那种，用queue一层层的那个。
//时间是O(n)的，但是空间也是O(n)的
/**
 * Definition for binary tree with next pointer.
 
* struct TreeLinkNode {
 
*  int val;
 
*  TreeLinkNode *left, *right, *next;
 
*  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
 
* };
 
*/

class Solution {

public:
    
	void connect(TreeLinkNode *root) {
        
	    if(root==NULL)
            
		return;
        
	    queue<TreeLinkNode*> qu;
        
    	    qu.push(root);
        
	    int count=1;
        
	    while(!qu.empty())
        
	    {
            
		for(int i=0;i<count-1;++i)
            
		{
                
		    TreeLinkNode* temp=qu.front();
                
		    qu.pop();
                
	    	    temp->next=qu.front();
                
		    if(temp->left)
                    
			qu.push(temp->left);
                
		    if(temp->right)
                    
			qu.push(temp->right);
            
		}
            
		TreeLinkNode* temp=qu.front();
            
		temp->next=NULL;
            
		if(temp->left)
                
		    qu.push(temp->left);
            
		if(temp->right)
                
		    qu.push(temp->right);
            
		qu.pop();
            
		count=qu.size();
        
	    }
    
	}

};

//第二种，给每个结点找上家
//时间是O(n)的，但是空间是O(1)的
/**
 * Definition for binary tree with next pointer.
 * struct TreeLinkNode {
 *  int val;
 *  TreeLinkNode *left, *right, *next;
 *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
 * };
 */
class Solution {
public:
    void connect(TreeLinkNode *root) {
        if(root==NULL)
            return;
        TreeLinkNode* nowStart=root;
        while(nowStart)
        {
            TreeLinkNode* prev=NULL;   //存储上家               //这两个也可以先定义好，省得每次都要重新生成。先定义好后，在这里直接写=NULL就行了
            TreeLinkNode* head=NULL;  //找下一行在哪个结点开始
            while(nowStart)
            {
                if(nowStart->left)
                {
                    if(prev==NULL)
                        head=nowStart->left;
                    else
                        prev->next=nowStart->left;
                    prev=nowStart->left;
                }
                if(nowStart->right)
                {
                    if(prev==NULL)
                        head=nowStart->right;
                    else
                        prev->next=nowStart->right;
                    prev=nowStart->right;
                }
                nowStart=nowStart->next;
            }
            
            nowStart=head;
        }
    }
};