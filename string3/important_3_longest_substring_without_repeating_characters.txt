//用滑动窗口，这种为了降时间复杂度，感觉用的办法都是双指针这类，弄一个i一个j，然后算差还是干什么
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        unordered_set<char> list;
        int i=0;
        int j=0;
        int re=0;
        while(i<s.size()&&j<s.size())
        {
            if(list.find(s[j])==list.end())
            {
                list.insert(s[j++]);
                re=max(re,j-i);
            }
            else
            {
                list.erase(s[i++]);    //从i往前滑，直到滑过去和j重的那个
            }
        }
        return re;
    }
};

//这个是更快的滑动窗口，用hashmap
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        unordered_map<char,int> maplist;
        int i=0;
        int re=0;
        unordered_map<char,int>::iterator it;
        for(int j=0;j<s.size();++j)
        {
            it=maplist.find(s[j]);
            if(it!=maplist.end())
            {
                i=max(it->second+1,i);
                maplist[it->first]=j;
            }
            else
            {
                maplist.insert(pair<char,int>(s[j],j));
            }
            
            re=max(re,j-i+1);
            
        }
        return re;
    }
};


//我自己写的hash表，原理一样，但是觉得简单一点
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int re=0;
        int hashlist[256]={0};
        int temp=0;
        for(int i=0;i<s.size();++i)
        {
            if(hashlist[s[i]]!=0&&hashlist[s[i]]>temp)
            {
                temp=hashlist[s[i]];
            }
            hashlist[s[i]]=i+1;
            re=max(re,i-temp+1);
        }
        return re;
    }
};

//后来自己又写的
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        if(s.size()<=1)
            return s.size();
        vector<int> hash(256,-1);
        hash[s[0]]=0;
        int i=0;
        int j=1;
        int re=1;
        while(i<=j&&j<s.size())
        {

            if(i==j||hash[s[j]]<hash[s[i]])
            {
                hash[s[j]]=j;
                ++j;
                re=max(re,j-i);
            }
            else
            {              
                ++i;
            }
        }
        return re;
        
    }
};

//稍稍改一下，感觉更好，虽然系统提交上没显示出来变好了......
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        if(s.size()<=1)
            return s.size();
        vector<int> hash(256,-1);
        hash[s[0]]=0;
        int i=0;
        int j=1;
        int re=1;
        while(i<=j&&j<s.size())
        {

            if(i==j||hash[s[j]]<hash[s[i]])
            {
                hash[s[j]]=j;
                ++j;
                re=max(re,j-i);
            }
            else
            {              
                i=hash[s[j]]+1;    //这句话改了下，感觉能省很多时间。i一个个往前挪太费劲了
            } 
        }
        return re;
        
    }
};

//再改一下，其实前面不需要那些判断的......
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        vector<int> hash(256,-1);
        int i=0;
        int j=0;
        int re=0;
        while(i<=j&&j<s.size())
        {
            if(i==j||hash[s[j]]<hash[s[i]])
            {
                hash[s[j]]=j;
                ++j;
                re=max(re,j-i);
            }
            else
            {              
                i=hash[s[j]]+1;    //这句话改了下，感觉能省很多时间。i一个个往前挪太费劲了
            } 
        }
        return re;
        
    }
};