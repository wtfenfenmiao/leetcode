//用dp，很慢
class Solution {
public:
    int numSquares(int n) {
        if(n<=0)
            return 0;
        vector<int> re(n+1,0);
        for(int i=1;i<=n;++i)
        {
            re[i]=i;
            for(int j=1;j*j<=i;++j)
            {
                re[i]=min(re[i],re[i-j*j]+1);
            }
        }
        return re[n];
            
    }
};

//更慢的dp，上面那个还快一些，是递推。下面这个记忆化搜索慢成狗
class Solution {
public:
    int numSquares(int n) {
        if(n<=1)
            return n;
        vector<int> re(n+1,0);
        return dp(re,n);
        
    }
    
    bool issqrt(int n)
    {
        int temp=sqrt(n);
        if(temp*temp==n)
            return true;
        else return false;
    }
    
    int dp(vector<int>& re,int n)
    {
        if(re[n]!=0)
            return re[n];
        if(issqrt(n))
        {
            re[n]=1;
            return re[n];
        }
        re[n]=n;
        for(int i=2;i*i<n;++i)
        {
            re[n]=min(re[n],dp(re,i*i)+dp(re,n-i*i));
        }
        return re[n];
    }
};
//数论，四平方和定理，答案只能是1234之一
//速度贼快
class Solution {
public:
    bool is1(int n)
    {
        int i=(int)(sqrt(n));
        return i*i==n;
    }
    
    int numSquares(int n) {
        if(n==0)
            return 0;
        if(is1(n))
            return 1;
        while((n&3)==0)     //n%4==0
            n=n>>2;
        if((n&7)==7)       //格外注意，这个&的优先级很低，比==低，所以不加括号的话就先算==了
            return 4;     //n%7==7
        int i=(int)(sqrt(n));
        for(int k=1;k<=i;++k)
        {
            if(is1(n-k*k))
                return 2;
        }
        return 3;
    }
};


//广度优先搜索，道理讲起来费点劲，看代码吧，就是一层一层查，先把=1的都弄出来，再根据=1的弄=2的，再弄=3的......
//速度相比DP快很多
class Solution {
public:
    int numSquares(int n) {
        if(n==0)
            return 0;
        
        vector<int> baselist;
        vector<int> savelist(n,0);
        int k=(int)(sqrt(n));
        for(int i=1;i<=k;++i)
        {
            baselist.push_back(i*i);
            savelist[i*i-1]=1;
        }
        if(savelist[n-1]==1)
            return 1;
        
        queue<int> qu;
        for(int i=0;i<baselist.size();++i)
        {
            qu.push(baselist[i]);
        }
        int count=1;
        
        while(!qu.empty())
        {
            ++count;
            int si=qu.size();
            for(int i=0;i<si;++i)
            {
                int temp=qu.front();
                for(int j=0;j<baselist.size();++j)
                {
                    int base=baselist[j];
                    if(temp+base==n)
                        return count;
                    if(temp+base<n&&savelist[temp+base-1]==0)
                    {
                        savelist[temp+base-1]=count;
                        qu.push(temp+base);
                    }
                    else if(temp+base>n)
                        break;
                }
                qu.pop();
            }
        }
    }
};