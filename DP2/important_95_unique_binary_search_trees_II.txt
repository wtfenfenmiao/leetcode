//递归，DP感觉太复杂了，由于返回的vector都得有空间，所以每个都要new
//DP还没弄懂
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> generateTrees(int n) {
        if(n==0)
        {
            vector<TreeNode*>* re=new vector<TreeNode*>();
            return *re;
        }
        return *genTree(1,n);
    }
    
    vector<TreeNode*>* genTree(int start,int end)
    {
        vector<TreeNode*>* list=new vector<TreeNode*>();
        if(start>end)
        {
            (*list).push_back(NULL);
        }
        else
        {
            for(int i=start;i<=end;++i)
            {
                vector<TreeNode*> left=*genTree(start,i-1);
                vector<TreeNode*> right=*genTree(i+1,end);
                for(auto le:left)
                {
                    for(auto ri:right)
                    {
                        TreeNode* root=new TreeNode(i);
                        root->right=ri;
                        root->left=le;
                        (*list).push_back(root);
                    }
                }
            }
            
        }
        return list;
    }
};


//不用这么复杂的指针
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> generateTrees(int n) {
        vector<TreeNode*> re;
        if(n==0)
            return re;
        return geneTrees(1,n);
    }
    
    vector<TreeNode*> geneTrees(int start,int end){
        vector<TreeNode*> re;
        if(start>end)
            re.push_back(NULL);
        else
        {
            for(int i=start;i<=end;++i)
            {
                vector<TreeNode*> left=geneTrees(start,i-1);
                vector<TreeNode*> right=geneTrees(i+1,end);
                for(auto le:left)
                {
                    for(auto ri:right)
                    {
                        TreeNode* root=new TreeNode(i);
                        root->left=le;
                        root->right=ri;
                        re.push_back(root);
                    }
                }
            }
        }
        
        return re;
    }
    
    
};


//树的dp，搞懂了
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> generateTrees(int n) {
        vector<vector<TreeNode*>> dpsave(n+1,vector<TreeNode*>());
        if(n==0)
            return dpsave[0];
        dpsave[0]=vector<TreeNode*>(1,NULL);
        
        for(int i=1;i<=n;++i)
        {
            for(int j=0;j<i;++j)
            {
                for(auto le:dpsave[j])
                {
                    for(auto ri:dpsave[i-j-1])
                    {
                        TreeNode* root=new TreeNode(j+1);
                        root->left=le;
                        root->right=clone(ri,j+1);
                        dpsave[i].push_back(root);
                    }
                }
            }
        }
        return dpsave[n];
    }
    
    TreeNode* clone(TreeNode* node,int a)
    {
        if(node==NULL)
            return NULL;
        TreeNode* re=new TreeNode(node->val+a);
        re->right=clone(node->right,a);
        re->left=clone(node->left,a);
        return re;
    }
};