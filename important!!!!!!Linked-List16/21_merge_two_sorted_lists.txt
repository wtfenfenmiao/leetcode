/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* newhead=new ListNode(0);
        newhead->next=l1;
        ListNode* l1pre=newhead;
        while(l1&&l2)
        {
            if(l1->val<l2->val)
            {
                l1pre=l1pre->next;
                l1=l1->next;
            }
            else
            {
                ListNode* temp=l2->next;
                l2->next=l1;
                l1pre->next=l2;
                l1pre=l1pre->next;
                l2=temp;             
            }  
        }
        if(l2)
            l1pre->next=l2;
        return newhead->next;
    }
};


//一个指针没这么复杂的
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* newhead=new ListNode(0);
        ListNode* head=newhead;
        while(l1&&l2)
        {
            if(l1->val>l2->val)
            {
                head->next=l2;
                l2=l2->next;
            }
            else
            {
                head->next=l1;
                l1=l1->next;
            }
            head=head->next;
        }
        head->next=l1==NULL?l2:l1;
        return newhead->next;
    }
};

//谜一样的递归操作
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1==NULL)
            return l2;
        if(l2==NULL)
            return l1;
        if(l1->val<l2->val)
        {
            l1->next=mergeTwoLists(l1->next,l2);
            return l1;
        }
        else
        {
            l2->next=mergeTwoLists(l1,l2->next);
            return l2;
        }
    }
};
