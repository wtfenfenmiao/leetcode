class Solution {
public:
    vector<int> findOrder(int numCourses, vector<pair<int, int>>& prerequisites) {
        vector<int> re;
        vector<vector<bool>> edgeMatrix(numCourses,vector<bool>(numCourses,false));
        vector<int> dupli(numCourses,0);    //记一门课有多少门先修课
        
        for(int i=0;i<prerequisites.size();++i)
        {
            int pre=prerequisites[i].second;
            int thiscou=prerequisites[i].first;
            edgeMatrix[pre][thiscou]=true;
            ++dupli[thiscou];     //这个得有，如果一门课有四门先修课，那么这门课必须得这四门都修完才能修，所以这个4得记下来
        }
        
        queue<int> qu;     //这个qu里放的都是现在可以直接上的课，就是先修课都修完的，dupli值是0的
        int count=0;
        for(int i=0;i<numCourses;++i)
        {
            if(dupli[i]==0)
                qu.push(i);
        }
        
        while(!qu.empty())
        {
            int thiscou=qu.front();
            qu.pop();
            re.push_back(thiscou);
            ++count;
            for(int i=0;i<numCourses;++i)
            {
                if(edgeMatrix[thiscou][i])
                {
                    if(dupli[i]!=0)
                    {
                        if(--dupli[i]==0)
                        {
                            qu.push(i);
                        }
                    }
                }
            }
        }
        return count==numCourses?re:vector<int>();
        
        
    }
};