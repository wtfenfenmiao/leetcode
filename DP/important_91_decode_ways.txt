//dp第一种,状态转移以第i个字符为前面字符串的结尾，从前往后找；但是被边界条件折磨的要死要活，只能用暴力美学了......
class Solution {
public:
    int numDecodings(string s) {
        if(s.size()==0)
            return 0;
        vector<int> re(s.size(),0);
        if(s[0]=='0')
            return 0;
        re[0]=1;
        if((s[0]=='1'&&s[1]=='0')||(s[0]=='2'&&s[1]=='0'))
            re[1]=1;
        else if(s[0]>'2'&&s[1]=='0') 
            re[1]=0;
        else if((s[0]=='2'&&s[1]>'6')||(s[0]>'2'&&s[1]!='0'))
            re[1]=1;
        else re[1]=2;
            
        for(int i=2;i<s.size();++i)
        {
            if(s[i-1]=='1'||(s[i-1]=='2'&&s[i]<='6'))
                re[i]=re[i-2];
            if(s[i]!='0')
                re[i]+=re[i-1];
        }
        return re[s.size()-1];
            
    }
};

//dp第二种，状态转移以第i个字符为后面字符串的开头，从后往前找，方便了很多。re比s的大小多一个，一个小技巧。
//这种dp要比前面的dp高明
class Solution {
public:
    int numDecodings(string s) {
        if(s.size()==0)
            return 0;
        vector<int> re(s.size()+1,0);
        re[s.size()]=1;
        re[s.size()-1]=s[s.size()-1]=='0'?0:1;
        for(int i=s.size()-2;i>=0;--i)
        {
            if(s[i]=='0') continue;
            re[i]=atoi(s.substr(i,2).c_str())<=26?(re[i+1]+re[i+2]):re[i+1];
        }
        return re[0];
    }
};