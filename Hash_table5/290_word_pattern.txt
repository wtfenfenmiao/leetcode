//我的解法，很复杂
class Solution {
public:
    bool wordPattern(string pattern, string str) {
        vector<string> strs;
        int i=0;
        for(int j=0;j<str.size();++j)
        {
            if(str[j]==' '||j==str.size()-1)
            {
                strs.push_back(str.substr(i,j==str.size()-1?(j-i+1):(j-i)));
                i=j+1;
            }      
        }     
        if(pattern.size()!=strs.size())
        {   
            return false;
        }
        unordered_map<char,int> charmap;
        unordered_map<char,int>::iterator iterchar;
        unordered_map<string,int> stringmap;
        unordered_map<string,int>::iterator iterstr;
        for(int k=0;k<pattern.size();++k)
        {
            iterchar=charmap.find(pattern[k]);
            iterstr=stringmap.find(strs[k]);
            if(iterchar!=charmap.end()&&iterstr!=stringmap.end())
            {
                if(iterchar->second!=iterstr->second)
                {
                    return false;
                }
                //cout<<iter->second<<endl;
                //cout<<strs[k]<<endl;
                //cout<<endl;
            }
            else if(iterchar==charmap.end()&&iterstr==stringmap.end())
            {
                charmap.insert(pair<char,int>(pattern[k],k));
                stringmap.insert(pair<string,int>(strs[k],k));
            }
            else 
                return false;
        }
        return true;
    }
};

//一个意思，但是简单了很多的代码
class Solution {
public:
    bool wordPattern(string pattern, string str) {
        vector<string> strs;
        stringstream ss(str);
        string str1;
        while(ss>>str1)
        {
            strs.push_back(str1);
        }
        if(pattern.size()!=strs.size())
        {
            return false;
        }
        unordered_map<char,int> charmap;
        unordered_map<string,int> stringmap;
        for(int i=0;i<pattern.size();++i)
        {
            if(charmap[pattern[i]]!=stringmap[strs[i]])
                return false;
            charmap[pattern[i]]=i+1;
            stringmap[strs[i]]=i+1;
        }
        return true;
    }
};