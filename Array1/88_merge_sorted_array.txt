//倒着排然后覆盖
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i=m-1;
        int j=n-1;
        int k=m+n-1;
        while(i>=0&&j>=0)
        {
            if(nums1[i]>nums2[j])
                nums1[k--]=nums1[i--];
            else
                nums1[k--]=nums2[j--];
        }
        while(j>=0)
            nums1[k--]=nums2[j--];
    }
};


//同理的另一种写法
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i=m-1;
        int j=n-1;
        int end=m+n-1;
        while(j>=0)
        {
            nums1[end]=(i>=0)?max(nums1[i],nums2[j]):nums2[j];
            if(nums1[end]==nums1[i])
                --i;
            else
                --j;
            --end;
        }
    }
};



//更简化一点，少点判断
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i=m-1;
        int j=n-1;
        int end=m+n-1;
        while(j>=0)
        {
            nums1[end--]=(i>=0&&nums1[i]>nums2[j])?nums1[i--]:nums2[j--];
        }
    }
};