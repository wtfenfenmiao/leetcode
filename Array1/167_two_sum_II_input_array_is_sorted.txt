//方法1，太暴力了......170ms
class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        vector<int> re(2,0);
        for(int i=0;i<numbers.size();++i)
        {
            int toFind=target-numbers[i];
            for(int j=i+1;j<numbers.size()&&numbers[j]<=toFind;++j)
            {
                if(numbers[j]==toFind)
                {
                    re[0]=i+1;
                    re[1]=j+1;
                }
            }
        }
        return re;
    }
};

//方法2，这个应该是时间复杂度最低的感觉......虽然和方法三时间显示差不多
class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        vector<int> re(2,0);
        if(numbers.size()<=1)
            return re;
        int start=0;
        int end=numbers.size()-1;
        while(end>start)
        {
            int sum=numbers[start]+numbers[end];
            if(sum==target)
            {
                re[0]=start+1;
                re[1]=end+1;
                return re;
            }
            else if(sum<target)
            {
                ++start;
            }
            else
                --end;
        }
    }
};

//方法三，标准的二分
class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        vector<int> re;
        int si=numbers.size();
        for(int i=0;i<si;++i)
        {
            if(i!=0&&numbers[i]==numbers[i-1])
                continue;
            int find=target-numbers[i];
            if(find<numbers[i])
                break;
            int low=i+1;
            int high=si-1;
            while(low<=high)
            {
                int mid=(low+high)/2;
                if(numbers[mid]==find)
                {
                    re.push_back(i+1);
                    re.push_back(mid+1);
                    return re;
                }
                if(numbers[mid]<find)
                    low=mid+1;
                else
                    high=mid-1;
            }
            
        }
    }
};