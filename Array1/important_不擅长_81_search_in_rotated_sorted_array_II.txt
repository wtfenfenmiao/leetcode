//这个题烦人就烦在有重复值上。。。。。。


//直接用二分查找，判断的时候对连续的区间进行判断。
//之前的33题的解法不适用了......因为有了重复的，所以之前的判断总会有bug......
//这个思路就是，只找好想的那种情况，那剩下的就是另一种情况了。如果这次的局面找不到好想的情况，咋想都有“歧义”的可能，就只执行消歧义的部分，下一轮再找
class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int lo=0;
        int hi=nums.size()-1;
        while(lo<=hi)
        {
            int mid=(lo+hi)/2;
            if(nums[mid]==target)
                return true;
            else if(nums[mid]>nums[hi])
            {
                if(nums[mid]>target&&nums[lo]<=target)
                    hi=mid-1;
                else
                    lo=mid+1;
            }
            else if(nums[mid]<nums[hi])
            {
                if(nums[mid]<target&&nums[hi]>=target)
                    lo=mid+1;
                else
                    hi=mid-1;
            }
            else
            {
                --hi;
            }
        }
        return false;
    }
};



//一个同一个意思的解法
class Solution {
public:
    bool search(vector<int>& nums, int target) {
        if(nums.size()==0)
            return false;
        int left=0;
        int right=nums.size()-1;
        while(left<=right)
        {
            int mid=(left+right)/2;
            if(nums[mid]==target)
                return true;
            if((nums[mid]==nums[left])&&(nums[mid]==nums[right]))
            {
                ++left;
                --right;
            }
            else if(nums[mid]>=nums[left])
            {
                if(nums[left]<=target&&nums[mid]>target)
                    right=mid-1;
                else
                    left=mid+1;
            }
            else
            {
                if(nums[right]>=target&&nums[mid]<target)
                    left=mid+1;
                else
                    right=mid-1;
            }
        }
        return false;
    }
};